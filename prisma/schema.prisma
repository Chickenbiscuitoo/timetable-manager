// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Teacher {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(128)
  shortname             String                  @db.VarChar(8)
  email                 String                  @db.VarChar(255)
  classId               Class?
  commitee              Committee?
  lessons               Lesson[]
  bindings              Binding[]
  BindingTeacherLessons BindingTeacherLessons[]

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@unique([ownerId, email])
  @@unique([ownerId, name])
  @@unique([ownerId, shortname])
  @@index([ownerId])
  @@index([organizationId])
}

model Subject {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  shortname  String   @unique @db.VarChar(8)
  commiteeId Int
  lessons    Lesson[]

  commitee Committee @relation(fields: [commiteeId], references: [id])
  Binding  Binding[]

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@unique([ownerId, name])
  @@unique([ownerId, shortname])
  @@index([ownerId])
  @@index([commiteeId])
  @@index([organizationId])
}

model Committee {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  chairmanId Int       @unique
  subjects   Subject[]

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  chairman Teacher @relation(fields: [chairmanId], references: [id])

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@unique([ownerId, name])
  @@index([ownerId])
  @@index([organizationId])
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(32)
  grade     Int
  teacherId Int      @unique
  lessons   Lesson[]

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  teacher Teacher   @relation(fields: [teacherId], references: [id])
  Binding Binding[]

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@unique([ownerId, name])
  @@index([ownerId])
  @@index([organizationId])
}

model Lesson {
  id       Int       @id @default(autoincrement())
  classId  Int
  subjects Subject[]
  teachers Teacher[]
  day      Int
  period   Int

  class Class @relation(fields: [classId], references: [id])

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@unique([ownerId, day, period, classId])
  @@index([classId])
  @@index([ownerId])
  @@index([organizationId])
}

model Binding {
  id        Int       @id @default(autoincrement())
  teachers  Teacher[]
  subjectId Int
  classId   Int

  class                 Class                   @relation(fields: [classId], references: [id])
  subject               Subject                 @relation(fields: [subjectId], references: [id])
  BindingTeacherLessons BindingTeacherLessons[]

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@unique([ownerId, subjectId, classId])
  @@index([ownerId])
  @@index([subjectId])
  @@index([classId])
  @@index([organizationId])
}

model BindingTeacherLessons {
  bindingId Int
  teacherId Int
  lessons   Int

  binding Binding @relation(fields: [bindingId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User?  @relation(fields: [ownerId], references: [id])

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  @@id([bindingId, teacherId])
  @@unique([bindingId, teacherId])
  @@index([ownerId])
  @@index([bindingId])
  @@index([teacherId])
  @@index([organizationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  Teacher               Teacher[]
  Subject               Subject[]
  Committee             Committee[]
  Class                 Class[]
  Binding               Binding[]
  BindingTeacherLessons BindingTeacherLessons[]
  Lesson                Lesson[]

  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  members               User[]
  Invite                Invite[]
  Teacher               Teacher[]
  Subject               Subject[]
  Committee             Committee[]
  Class                 Class[]
  Binding               Binding[]
  BindingTeacherLessons BindingTeacherLessons[]
  Lesson                Lesson[]
}

model Invite {
  id             String       @id @default(cuid())
  senderEmail    String
  recipientEmail String
  expires        DateTime
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  @@unique([senderEmail, recipientEmail])
  @@index([organizationId])
}
